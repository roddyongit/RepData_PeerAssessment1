method = "auto", formula = year ~ Emissions, se = TRUE, n = 80, fullrange = FALSE, level = 0.95,
na.rm = FALSE, ...)
print(myplot)
myplot = ggplot(Emissions_LA_Baltimore, aes(year, Emissions, group=City, color=City, fill=City )) +
geom_line()+
facet_wrap(~ City) +
xlab("Year") + ylab(expression("PM"[2.5]* " Emissions (in tons)")) +
ggtitle(expression(atop (expression("Total Emissions from PM"[2.5]* " in Los Angeles, CA & Baltimore, MD"),
atop(italic("Motor Vehicles only -  (1999 - 2008)"), "")))) +
theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1),
plot.title = element_text(size = 25, face = "bold", colour = "black", vjust = -1))+
geom_boxplot() +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
print(myplot)
myplot = ggplot(Emissions_LA_Baltimore, aes(year, Emissions, group=City, color=City, fill=City )) +
geom_bar()+
facet_wrap(~ City) +
xlab("Year") + ylab(expression("PM"[2.5]* " Emissions (in tons)")) +
ggtitle(expression(atop (expression("Total Emissions from PM"[2.5]* " in Los Angeles, CA & Baltimore, MD"),
atop(italic("Motor Vehicles only -  (1999 - 2008)"), "")))) +
theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1),
plot.title = element_text(size = 25, face = "bold", colour = "black", vjust = -1))+
geom_boxplot() +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
print(myplot)
myplot = ggplot(Emissions_LA_Baltimore, aes(year, Emissions, group=City, color=City, fill=City )) +
geom_bar()+
facet_wrap(~ City) +
xlab("Year") + ylab(expression("PM"[2.5]* " Emissions (in tons)")) +
ggtitle(expression(atop (expression("Total Emissions from PM"[2.5]* " in Los Angeles, CA & Baltimore, MD"),
atop(italic("Motor Vehicles only -  (1999 - 2008)"), "")))) +
theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1),
plot.title = element_text(size = 25, face = "bold", colour = "black", vjust = -1))+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
print(myplot)
myplot = ggplot(Emissions_LA_Baltimore, aes(year, Emissions, group=City, color=City, fill=City )) +
geom_bar(stat="identity")+
facet_wrap(~ City) +
xlab("Year") + ylab(expression("PM"[2.5]* " Emissions (in tons)")) +
ggtitle(expression(atop (expression("Total Emissions from PM"[2.5]* " in Los Angeles, CA & Baltimore, MD"),
atop(italic("Motor Vehicles only -  (1999 - 2008)"), "")))) +
theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1),
plot.title = element_text(size = 25, face = "bold", colour = "black", vjust = -1))+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
print(myplot)
# Install and Load R Packages
# ---------------------------------------------
install.packages("twitteR")
install.packages("ROAuth")
library("twitteR")
library("ROAuth")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey='fsqFrwpbhgwBlE9S1ayPCD38T',
consumerSecret='JrbbWx9wkXHJSDc1XYhEaLDU1Jk7Ors9cObpo6bJVaLim7iNMV',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
#save for later use for Windows
save(cred, file="twitter authentication.Rdata")
# Load "twitter authentication.Rdata" file in your session and run registerTwitterOAuth.
load("twitter authentication.Rdata")
registerTwitterOAuth(cred)
# Setting 2 variables...
search.string <- "automation"      # for the serach string...
no.of.tweets <- 100          # Number of tweets
tweets <- searchTwitter(search.string, n=no.of.tweets, cainfo="cacert.pem", lang="en")
# tweets <- searchTwitter(searchstring, n=tweets, cainfo="cacert.pem", lang="en")
tweets
# Setting 2 variables...
search.string <- "relays"      # for the serach string...
no.of.tweets <- 100          # Number of tweets
tweets <- searchTwitter(search.string, n=no.of.tweets, cainfo="cacert.pem", lang="en")
# tweets <- searchTwitter(searchstring, n=tweets, cainfo="cacert.pem", lang="en")
tweets
source('C:/Coursera/RProg/twitter/twitter.R')
t = twitter("safety")
t
t = twitter("automation fair")
t
t = twitter("internet of  things", 50)
t
t = twitter("internet of  things, Rockwell Automation", 50)
t = twitter("internet of  things, Rockwell", 50)
t = twitter("internet of  things at Rockwell", 50)
t = twitter("internet of  things", 50)
t
t = twitter("Rockweall Automation fair", 50)
t = twitter("Rockwell Automation fair", 50)
t
t = twitter("color purple", 50)
t
source('C:/Coursera/RProg/twitter/ratwitter_onetime.R')
t = twitter("light curtain", 50)
t
?searchTwitter
t = twitter("lumbrera elblog", 50)
t = twitter("lumbrera", 50)
t
t = twitter("Dolly McCabe", 50)
t = twitter("Dolly", 50)
t
t = twitter("#arosario1969", 50)
t = twitter("#arosario", 50)
}
source('C:/Coursera/RProg/Month4Project2/plot2.R')
source('C:/Coursera/RProg/twitter/twitter.R')
version
version
install.packages("rmarkdown")
setwd("C:/Coursera/RProg/Month4Project2")
dir
dir()
getwd()
getwd()
setwd("C:/Coursera/RProg/RepData_PA1")
getwd()
dir
dir()
ls()
getwd()
dir()
?read.cvs
?read.cvs()
?read.csv()
activity = read.csv(file="activity.csv", header = TRUE, sep = ",")
getwd()
dir()
setwd("C:/Coursera/RProg/RepData_PeerAssessment1")
dir()
activity = read.csv(file="activity.csv", header = TRUE, sep = ",")
names(activity)
summary(activity)
source('C:/Coursera/RProg/RepData_PeerAssessment1/pa1.R')
head(activity)
tail(activity)
head(activity,20)
head(activity,200)
names(activity)
summary(activity)
summary(activity)
str(activity)
?weekday
?weekday()
?weekend()
?weekdays()
summary(activity)
str(activity)
class(activity$date)
wday1 = as.POSIXlt(activity$date)$wday
wday1 = as.POSIXlt(activity$date)$wday
wday1
names(activity)
#summary(activity)
str(activity)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"))
head(activity)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
tail(activity)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
tail(activity,200)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
tail(activity,400)
source('C:/Coursera/RProg/RepData_PeerAssessment1/pa1.R')
source('C:/Coursera/RProg/RepData_PeerAssessment1/pa1.R')
names(activity)
summary(activity)
str(activity)
activity = transform(activity,
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
?mean
class(activity$date)
d = as.Date(activity$date)
d
class(d)
activity = transform(activity, date = as.Date(activity$date)
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
activity = transform(activity, date = as.Date(activity$date),
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
head(activity)
class(activity)
class(activity$date)
a = subset(activity, rm.na=TRUE)
a
head(a)
a
a = subset(activity, na.rm=TRUE)
head(a)
?is.na
a = subset(activity, !is.na(steps) == TRUE)
head(a)
summary(a)
str(a)
summary(activity)
?mean
totalstepsday <- with(activity, aggregate(activity[,steps],
by = list(date = date), sum))
totalstepsday
totalstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), sum))
totalstepsday
totalstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), sum, na.rm=TRUE))
totalstepsday
totalstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), sum, na.rm=TRUE))
totalstepsday
hist(totalstepsday)
totalstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), sum, na.rm=TRUE))
totalstepsday
hist(totalstepsday$x)
hist(totalstepsday$x, col="blue")
hist(totalstepsday$x, col="yellow")
###  Calculate total steps per day
```{r}
totalstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), sum, na.rm=TRUE))
hist(totalstepsday$x, col="yellow", xlab+"Total steps per day")
hist(totalstepsday$x, col="yellow", xlab="Total steps per day")
hist(totalstepsday$x, title="Total number of steps taken each day", xlab="Total steps per day", col="yellow")
hist(totalstepsday$x, title="Total number of steps taken each day", xlab="Total steps per day", col="yellow")
hist(totalstepsday$x, main="Total number of steps taken each day", xlab="Total steps per day", col="yellow")
?median
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean, na.rm=TRUE))
meanstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean, na.rm=TRUE))
meanstepsday
medianstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), median, na.rm=TRUE))
medianstepsday
activity = transform(activity, date = as.Date(activity$date),
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
medianstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), median, na.rm=TRUE))
medianstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean, na.rm=TRUE))
meanstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean,
(na.rm=TRUE $ !is.nan(activity$steps)
)))
meanstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean,
(na.rm=TRUE $ !is.nan(activity$steps)
)))
meanstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean,
(na.rm=TRUE & !is.nan(activity$steps)
)))
meanstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean,na.rm=TRUE)))
meanstepsday
medianstepsday <- with(activity,
aggregate(activity[,c("steps")],
by = list(date = date), median, na.rm=TRUE))
medianstepsday
meanstepsday <- with(activity, aggregate(activity[,c("steps")],
by = list(date = date), mean,na.rm=TRUE))
meanstepsday
?hist
require(plyr)
# Note the use of the '.' function to allow
# group and sex to be used without quoting
ddply(activity, .(group, date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# Note the use of the '.' function to allow
# group and sex to be used without quoting
ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
names(activity)
class(activity$steps)
unique(activity$steps)
x = activity[is.nan == TRUE,]
?is.nan
x = activity[is.nan(activity$steps),]
x
x = activity[is.na(activity$steps),]
x
length(x)
summary(x)
me = mean(activity$steps, na.rm=TRUE)
me
me = mean(activity$steps)
me
md = median(activity$steps, na.rm=TRUE)
md
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# Plot a line chart of the result
plot(mean.steps.day ~ date, type = "l", data = activity.results)
activity$steps
names(activity)
xx = activity(date="2012-10-01",   )
xx = activity[date="2012-10-01",]
xx = activity[date=="2012-10-01",]
names(activity)
xx = activity[activity$date=="2012-10-01",]
xx
no.na.activity = activity[!is.na(activity$steps),]
no.na.activity
xx = no.na.activity[no.na.activity$date=="2012-10-05",]
xx
mean(xx$steps)
summary(xx)
median(xx$steps)
xx
median(xx$steps)
?mean
?median
median(as.Double(xx$steps))
median(as.double(xx$steps))
xx$steps
class(xx$steps)
median(xx$steps)
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# See results - temporary... to explore data...
mean.steps.day
median.steps.day
require(plyr)
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# See results - temporary... to explore data...
mean.steps.day
median.steps.day
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# See results - temporary... to explore data...
activity.results
require(plyr)
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm == TRUE), 2),
median.steps.day = round(median(steps, na.rm == TRUE),2))
# See results - temporary... to explore data...
activity.results
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = (mean(steps, na.rm = TRUE), 2),
median.steps.day = (median(steps, na.rm = TRUE),2))
# See results - temporary... to explore data...
activity.results
activity.results = ddply(activity, .(date), summarize,
mean.steps.day = round(mean(steps, na.rm = TRUE), 2),
median.steps.day = round(median(steps, na.rm = TRUE),2))
# See results - temporary... to explore data...
activity.results
require(plyr)
activity.results  = ddply(activity,"year",function(x) {
x <- na.omit(x$steps)
mean.steps.day <- mean(x)
median.steps.day <- median(x)
}
# See results - temporary... to explore data...
activity.results
# Plot a line chart of the result
plot(mean.steps.day ~ date, type = "l", data = activity.results)
activity.results  = ddply(activity,"year",function(x) {
x <- na.omit(x$steps)
mean.steps.day <- mean(x)
median.steps.day <- median(x)
}
# See results - temporary... to explore data...
activity.results
activity.results  = ddply(activity,"year",function(x) {
x <- na.omit(x$steps)
mean.steps.day <- mean(x)
median.steps.day <- median(x)
}
activity.results
activity.results  = ddply(activity,"year",function(x) {
x <- na.omit(x$steps)
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
?complete.cases
y = complete.cases(activity)
y
summary(y)
j = activity[y==TRUE]
j = activity[y==TRUE,]
j
summary(j)
str(j)
no.na.vector = complete.cases(activity)
no.na.vector
str(no.na.vector)
summary(no.na.vector
)
activity[no.na.vector==TRUE]
activity[no.na.vector==TRUE,]
activity.no.na = activity[no.na.vector==TRUE,]
activity.no.na
summary(activity.no.na)
str(activity.no.na)
activity = transform(activity, date = as.Date(activity$date),
varweekday = ifelse((as.POSIXlt(activity$date)$wday >=1
& as.POSIXlt(activity$date)$wday <=5),
"weekday", "weekend"),
weekdayvalue = as.POSIXlt(activity$date)$wday)
no.na.vector = complete.cases(activity)
activity.no.na = activity[no.na.vector==TRUE,]
str(activity.no.na)
totalstepsday <- with(activity.no.na, aggregate(activity.no.na[,c("steps")],
by = list(date = date), sum))
totalstepsday
hist(totalstepsday$x, main="Total number of steps taken each day", xlab="Total steps per day", col="yellow")
names(activity.no.na)
activity.results  = ddply(activity.no.na,"year",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
require(plyr)
activity.results  = ddply(activity.no.na,"year",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
require(plyr)
activity.results  = ddply(activity.no.na,"year",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
# Plot a line chart of the result
plot(mean.steps.day ~ date, type = "l", data = activity.results)
activity.no.na
names(activity.no.na)
activity.results  = ddply(activity.no.na,"date",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
require(plyr)
activity.results  = ddply(activity.no.na,"date",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
plot(mean.steps.day ~ date, type = "l", data = activity.results)
class(activity.no.na)
str(activity.no.na)
x = activity.no.na[is.na(activity.no.na$steps),]
x
activity.results  = ddply(activity.no.na,"date",function(x) {
mean.steps.day <- mean(x)
median.steps.day <- median(x)
})
activity.results
plot(mean.steps.day ~ date, type = "l", data = activity.results)
activity.results  = ddply(activity.no.na,"date",function(x) {
mean.steps.day <- mean(x, na.rm = TRUE)
median.steps.day <- median(x, na.rm = TRUE)
})
activity.results
source('C:/Coursera/RProg/RepData_PeerAssessment1/pa1.R')
